const fs = require('fs');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ puppeteer
let puppeteer;
try {
  puppeteer = require('puppeteer');
} catch (error) {
  console.error('‚ùå Puppeteer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:');
  console.error('npm install puppeteer');
  process.exit(1);
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const CSS_STYLES = `
<style>
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f8f9fa;
  }
  
  .container {
    background: white;
    padding: 40px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
  }
  
  h1 {
    color: #2c3e50;
    border-bottom: 3px solid #3498db;
    padding-bottom: 10px;
    margin-bottom: 30px;
  }
  
  h2 {
    color: #34495e;
    border-bottom: 2px solid #ecf0f1;
    padding-bottom: 8px;
    margin-top: 40px;
    margin-bottom: 20px;
  }
  
  h3 {
    color: #7f8c8d;
    margin-top: 30px;
    margin-bottom: 15px;
  }
  
  ul {
    padding-left: 20px;
  }
  
  li {
    margin-bottom: 8px;
  }
  
  strong {
    color: #2c3e50;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 20px 0;
  }
  
  .stat-card {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 6px;
    border-left: 4px solid #3498db;
  }
  
  .stat-number {
    font-size: 24px;
    font-weight: bold;
    color: #3498db;
  }
  
  .stat-label {
    color: #7f8c8d;
    font-size: 14px;
    margin-top: 5px;
  }
  
  .file-tree {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 6px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.4;
  }
  
  .file-tree ul {
    list-style: none;
    padding-left: 20px;
  }
  
  .file-tree li {
    margin-bottom: 4px;
  }
  
  .directory {
    color: #2980b9;
    font-weight: bold;
  }
  
  .file {
    color: #27ae60;
  }
  
  .file-info {
    color: #7f8c8d;
    font-size: 12px;
  }
  
  .extensions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 10px;
    margin: 15px 0;
  }
  
  .extension-item {
    background: #ecf0f1;
    padding: 8px 12px;
    border-radius: 4px;
    text-align: center;
  }
  
  .extension-name {
    font-weight: bold;
    color: #2c3e50;
  }
  
  .extension-count {
    color: #7f8c8d;
    font-size: 12px;
  }
  
  .largest-files {
    background: #fff3cd;
    padding: 15px;
    border-radius: 6px;
    border-left: 4px solid #ffc107;
  }
  
  .largest-files h3 {
    color: #856404;
    margin-top: 0;
  }
  
  .file-item {
    margin-bottom: 8px;
    padding: 8px;
    background: white;
    border-radius: 4px;
  }
  
  .file-path {
    font-weight: bold;
    color: #2c3e50;
  }
  
  .file-details {
    color: #7f8c8d;
    font-size: 12px;
  }
  
  .header-info {
    background: #e8f4fd;
    padding: 15px;
    border-radius: 6px;
    margin-bottom: 30px;
    border-left: 4px solid #3498db;
  }
  
  .header-info em {
    color: #2980b9;
    font-style: italic;
  }
</style>
`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Markdown –≤ HTML
function markdownToHtml(markdown) {
  // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML
  let html = markdown
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    
    // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    
    // –ö—É—Ä—Å–∏–≤
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    
    // –°–ø–∏—Å–∫–∏
    .replace(/^- (.*$)/gim, '<li>$1</li>')
    
    // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\n\n/g, '</p><p>')
    .replace(/\n/g, '<br>');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
  html = html.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
  html = '<p>' + html + '</p>';
  html = html.replace(/<p><\/p>/g, '');
  
  return html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è HTML —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
function enhanceHtml(html) {
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  html = html.replace(
    /<h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞<\/h2>/g,
    '<h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2><div class="stats-grid">'
  );
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  html = html.replace(
    /<li><strong>–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:<\/strong> (\d+)<\/li>/g,
    '<div class="stat-card"><div class="stat-number">$1</div><div class="stat-label">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div></div>'
  );
  
  html = html.replace(
    /<li><strong>–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:<\/strong> (\d+)<\/li>/g,
    '<div class="stat-card"><div class="stat-number">$1</div><div class="stat-label">–í—Å–µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π</div></div>'
  );
  
  html = html.replace(
    /<li><strong>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:<\/strong> (.*?)<\/li>/g,
    '<div class="stat-card"><div class="stat-number">$1</div><div class="stat-label">–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä</div></div>'
  );
  
  html = html.replace(
    /<li><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫:<\/strong> (.*?)<\/li>/g,
    '<div class="stat-card"><div class="stat-number">$1</div><div class="stat-label">–°—Ç—Ä–æ–∫ –∫–æ–¥–∞</div></div>'
  );
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º stats-grid
  html = html.replace(
    /<h3>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤<\/h3>/g,
    '</div><h3>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤</h3>'
  );
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  html = html.replace(
    /<li><strong>(.*?):<\/strong> (\d+) —Ñ–∞–π–ª–æ–≤<\/li>/g,
    '<div class="extension-item"><div class="extension-name">$1</div><div class="extension-count">$2 —Ñ–∞–π–ª–æ–≤</div></div>'
  );
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
  html = html.replace(
    /<h3>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤<\/h3>/g,
    '<h3>–†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤</h3><div class="extensions-grid">'
  );
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º extensions-grid
  html = html.replace(
    /<h3>–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã<\/h3>/g,
    '</div><h3>–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã</h3>'
  );
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
  html = html.replace(
    /<h3>–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã<\/h3>/g,
    '<div class="largest-files"><h3>–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã</h3>'
  );
  
  html = html.replace(
    /<li><strong>(.*?)<\/strong> \((.*?), (\d+) —Å—Ç—Ä–æ–∫\)<\/li>/g,
    '<div class="file-item"><div class="file-path">$1</div><div class="file-details">$2, $3 —Å—Ç—Ä–æ–∫</div></div>'
  );
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º largest-files
  html = html.replace(
    /<h2>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞<\/h2>/g,
    '</div><h2>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>'
  );
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
  html = html.replace(
    /<h2>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞<\/h2>/g,
    '<h2>üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2><div class="file-tree">'
  );
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º file-tree
  html = html.replace(/<\/p>$/, '</div></p>');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  html = html.replace(
    /<h1>(.*?)<\/h1>/g,
    '<div class="header-info"><h1>$1</h1>'
  );
  
  html = html.replace(
    /<p><em>(.*?)<\/em><\/p>/g,
    '<em>$1</em></div>'
  );
  
  return html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ PDF
async function convertToPdf(inputPath, outputPath) {
  console.log('üìñ –ß—Ç–µ–Ω–∏–µ Markdown —Ñ–∞–π–ª–∞...');
  const markdown = fs.readFileSync(inputPath, 'utf8');
  
  console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ HTML...');
  let html = markdownToHtml(markdown);
  html = enhanceHtml(html);
  
  const fullHtml = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ö–∞—Ä—Ç–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã</title>
    ${CSS_STYLES}
</head>
<body>
    <div class="container">
        ${html}
    </div>
</body>
</html>
  `;
  
  console.log('üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  console.log('üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...');
  await page.setContent(fullHtml, { waitUntil: 'networkidle0' });
  
  await page.pdf({
    path: outputPath,
    format: 'A4',
    margin: {
      top: '20mm',
      right: '20mm',
      bottom: '20mm',
      left: '20mm'
    },
    printBackground: true,
    displayHeaderFooter: true,
    headerTemplate: '<div style="font-size: 10px; text-align: center; width: 100%; color: #666;">–ö–∞—Ä—Ç–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã</div>',
    footerTemplate: '<div style="font-size: 10px; text-align: center; width: 100%; color: #666;">–°—Ç—Ä–∞–Ω–∏—Ü–∞ <span class="pageNumber"></span> –∏–∑ <span class="totalPages"></span></div>'
  });
  
  await browser.close();
  
  console.log(`‚úÖ PDF —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const inputPath = path.join(process.cwd(), 'CODEBASE-MAP.md');
  const outputPath = path.join(process.cwd(), 'CODEBASE-MAP.pdf');
  
  if (!fs.existsSync(inputPath)) {
    console.error('‚ùå –§–∞–π–ª CODEBASE-MAP.md –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ generate-codebase-map.js');
    process.exit(1);
  }
  
  try {
    await convertToPdf(inputPath, outputPath);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { convertToPdf }; 